{"version":3,"sources":["components/countdown-container/CountdownContainer.jsx","components/idea/Idea.jsx","components/modal/Modal.jsx","components/modal/intro-modal/IntroModal.jsx","components/secondary-navigation/SecondaryNavigation.jsx","components/text-input/TextInput.jsx","components/modal/share-idea/ShareIdeaModal.jsx","components/welcome-container/WelcomeContainer.jsx","App.js","reportWebVitals.js","index.js"],"names":["CountdownContainer","className","Idea","context","description","title","upvoteIdea","downvoteIdea","numUpvotes","upvoted","Provider","value","color","size","onClick","Modal","props","isOpen","onRequestClose","closeModal","style","content","background","children","IntroModal","SecondaryNavigation","openIntroModal","openCreateModal","TextInput","label","useTextArea","useCharacterCount","maxCount","useField","field","meta","id","name","htmlFor","touched","error","length","defaultProps","ShareIdeaModal","formSubmitted","ShareIdeaPostSubmit","link","ShareIdeaModalForm","onSubmit","initialValues","email","validationSchema","Yup","max","required","isSubmitting","placeholder","inputRef","useRef","readOnly","ref","TwitterShareButton","url","current","focus","select","document","execCommand","WelcomeContainer","openShareIdeaModal","Ideas","ideas","map","idea","handleUpvoteClick","upvotes","App","useState","setIdeas","infiniteScrollCounter","setInfiniteScrollCounter","introModalVisible","setIntroModalVisible","lastIdeaSeen","setLastIdeaSeen","loading","setLoading","olderIdeasExist","setOlderIdeasExist","shareIdeaModalVisible","setShareIdeaModalVisible","shareLink","setShareLink","bottomBoundary","ideaId","upvote","a","copyOfIdeas","ideaIndex","findIndex","ideaPreviousUpvotes","axios","put","values","setSubmitting","post","data","results","user","idHash","previousState","ReactModal","setAppElement","useEffect","get","then","response","catch","URLSearchParams","window","location","search","console","log","element","node","IntersectionObserver","entries","forEach","entry","isIntersecting","observe","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"2aAMe,SAASA,IACtB,OACE,sBAAKC,UAAU,sBAAf,UACE,qBAAKA,UAAU,gBAAf,iDACA,qBAAKA,UAAU,gBAAf,6D,yBCLS,SAASC,EAAT,GAQX,IAPFC,EAOC,EAPDA,QACAC,EAMC,EANDA,YACAC,EAKC,EALDA,MACAC,EAIC,EAJDA,WACAC,EAGC,EAHDA,aACAC,EAEC,EAFDA,WACAC,EACC,EADDA,QAcA,OACE,sBAAKR,UAAU,OAAf,UACE,qBAAKA,UAAU,gBAAf,SAAgCI,IAChC,sBAAKJ,UAAU,eAAf,UACE,qBAAKA,UAAU,sBAAf,4CACA,qBAAKA,UAAU,oBAAf,SAAoCG,OAEtC,sBAAKH,UAAU,eAAf,UACE,qBAAKA,UAAU,sBAAf,kBACA,qBAAKA,UAAU,oBAAf,SAAoCE,OAEtC,sBAAKF,UAAU,+BAAf,UACE,cAAC,IAAYS,SAAb,CAAsBC,MAAO,CAAEC,MAAOH,EAAU,UAAY,UAAWI,KAAM,QAA7E,SACE,cAAC,IAAD,CACEZ,UAAU,qBACVa,QAvBV,WACOL,EAGHF,IAFAD,SAwBE,sBAAML,UAAU,oBAAhB,SAAqCO,U,OC9B9B,SAASO,EAAMC,GAC5B,OACE,eAAC,IAAD,CACEf,UAAWe,EAAMf,UAAYe,EAAMf,UAAY,GAC/CgB,OAAQD,EAAMC,OACdC,eAAgBF,EAAMG,WACtBC,MAAO,CAAEC,QAAS,CAACC,WAAY,qCAJjC,UAME,qBAAKrB,UAAU,+BAAf,SACE,cAAC,IAAYS,SAAb,CAAsBC,MAAO,CAAEE,KAAM,QAArC,SACE,cAAC,IAAD,CAASZ,UAAU,qBAAqBa,QAASE,EAAMG,iBAG3D,qBAAKlB,UAAU,0BAAf,SACGe,EAAMO,cCrBA,SAASC,EAAWR,GACjC,OACE,eAAC,EAAD,CACEG,WAAYH,EAAMG,WAClBF,OAAQD,EAAMC,OAFhB,UAIE,qBAAKhB,UAAU,6BAAf,qBACA,qBAAKA,UAAU,gBAAf,0BACA,mBAAGA,UAAU,0BAAb,+PACA,qBAAKA,UAAU,gBAAf,0BACA,+BACE,qZACA,wIACA,0IAEF,qBAAKA,UAAU,gBAAf,oBACA,qBAAKA,UAAU,0BAAf,2MACA,qBAAKA,UAAU,gBAAf,+BACA,+BACE,6DACA,8MAEF,qBAAKA,UAAU,gBAAf,qBACA,mBAAGA,UAAU,0BAAb,gF,OCnBS,SAASwB,EAAoBT,GAC1C,OACE,sBAAKf,UAAU,uBAAf,UACE,wBAAQA,UAAU,+DAAlB,SACE,cAAC,IAAYS,SAAb,CAAsBC,MAAO,CAAEE,KAAM,OAAQD,MAAO,WAApD,SACE,cAAC,IAAD,CAAeE,QAASE,EAAMU,qBAGlC,wBAAQzB,UAAU,sEAAlB,SACE,cAAC,IAAYS,SAAb,CAAsBC,MAAO,CAAEE,KAAM,OAAQD,MAAO,WAApD,SACE,cAAC,IAAD,CAAUE,QAASE,EAAMW,yB,oDCZpB,SAASC,EAAT,GAA8F,IAAzEC,EAAwE,EAAxEA,MAAOC,EAAiE,EAAjEA,YAAaC,EAAoD,EAApDA,kBAAmBC,EAAiC,EAAjCA,SAAwBhB,GAAS,EAAvBf,UAAuB,mFAC1G,EAAsBgC,YAASjB,GAA/B,mBAAOkB,EAAP,KAAcC,EAAd,KACA,OACE,sBAAKlC,UAAS,oDAA+Ce,EAAMoB,IAAMpB,EAAMqB,MAA/E,UACE,uBAAOpC,UAAU,mBAAmBqC,QAAStB,EAAMoB,IAAMpB,EAAMqB,KAA/D,SAAsER,IACrEM,EAAKI,SAAWJ,EAAKK,MACpB,qBAAKvC,UAAU,mBAAf,SAAmCkC,EAAKK,QACtC,KACHV,EACC,kDAAU7B,UAAU,0BAA6BiC,GAAWlB,IAC5D,+CAAOf,UAAU,2BAA8BiC,GAAWlB,IAG1De,EACE,sBAAK9B,UAAU,+BAAf,YAAiDiC,EAAMvB,MAAM8B,OAAST,GAAtE,MAAoFA,KACpF,QAMVJ,EAAUc,aAAe,CACvBzC,UAAW,I,OCbE,SAAS0C,EAAe3B,GACrC,OACE,cAAC,EAAD,CACEG,WAAYH,EAAMG,WAClBF,OAAQD,EAAMC,OAFhB,SAIGD,EAAM4B,cAAgB,cAACC,EAAD,CAAqBC,KAAM9B,EAAM8B,OAAW,cAACC,EAAD,CAAoBC,SAAUhC,EAAMgC,aAU7G,SAASD,EAAmB/B,GAC1B,OACE,cAAC,IAAD,CACEiC,cAAe,CACb5C,MAAO,GACPD,YAAa,GACbD,QAAS,GACT+C,MAAO,IAETC,iBAAkBC,IAAW,CAC3B/C,MAAO+C,MACJC,IAAI,GAAI,qCACRC,SAAS,YACZlD,YAAagD,MACVC,IAAI,IAAK,sCACTC,SAAS,YACZnD,QAASiD,MACNC,IAAI,IAAK,sCACTC,SAAS,YACZJ,MAAOE,MACJF,MAAM,yBACNI,SAAS,cAEdN,SAAUhC,EAAMgC,SArBlB,SAuBG,gBAAGO,EAAH,EAAGA,aAAH,OACC,eAAC,IAAD,WACE,cAAC,EAAD,CACE1B,MAAO,QACPQ,KAAM,QACNmB,YAAa,mBAEf,cAAC,EAAD,CACE3B,MAAO,uDACPQ,KAAM,cACNmB,YAAa,8CACb1B,aAAa,EACbC,mBAAmB,EACnBC,SAAU,MAEZ,cAAC,EAAD,CACEK,KAAM,UACNR,MAAO,6CACP2B,YAAa,+CACb1B,aAAa,EACbC,mBAAmB,EACnBC,SAAU,MAEZ,cAAC,EAAD,CACEH,MAAM,QACNQ,KAAK,QACLmB,YAAY,sBAEd,qBAAKvD,UAAU,8BAAf,SACE,wBAAQA,UAAU,iCAAlB,SAAoDsD,EAAe,gBAAkB,mBAajG,SAASV,EAAoB7B,GAC3B,IAAMyC,EAAWC,iBAAO,MAYxB,OACE,sBAAKzD,UAAU,iCAAf,UACE,qBAAKA,UAAU,6BAAf,qBACA,mBAAGA,UAAU,0BAAb,4DACA,qBAAKA,UAAU,iCAAf,kBACA,mBAAGA,UAAU,0BAAb,+IACA,uBAAOA,UAAU,wBAAwB0D,UAAQ,EAACC,IAAKH,EAAU9C,MAAOK,EAAM8B,OAC9E,qBAAK7C,UAAU,iCAAf,qCACA,qBAAKA,UAAU,+BAAf,SACE,eAAC,IAAYS,SAAb,CAAsBC,MAAO,CAAEE,KAAM,OAAQD,MAAO,WAApD,UACE,eAACiD,EAAA,EAAD,CACE5D,UAAU,oBACVI,MAAM,+BACNyD,IAAK9C,EAAM8B,KAHb,UAKE,sBAAM7C,UAAU,yBAAhB,SACE,cAAC,IAAD,MAEF,sBAAMA,UAAU,yBAAhB,wBAEF,yBAAQA,UAAU,6CAA6Ca,QAAS,kBAzB9E2C,EAASM,QAAQC,QACjBP,EAASM,QAAQE,cACjBC,SAASC,YAAY,SAuBf,UACE,sBAAMlE,UAAU,yBAAhB,SACE,cAAC,IAAD,MAEF,sBAAMA,UAAU,yBAAhB,kC,OCxIG,SAASmE,EAAiBpD,GACvC,OACE,sBAAKf,UAAU,oBAAf,UACE,qBAAKA,UAAU,gBAAf,uDACA,sBAAKA,UAAU,sCAAf,UACE,wBAAQA,UAAU,0DAA0Da,QAAS,kBAAME,EAAMU,kBAAjG,6BACA,wBAAQzB,UAAU,0DAA0Da,QAAS,kBAAME,EAAMqD,sBAAjG,8B,OC8KR,SAASC,EAAMtD,GACb,OACE,qBAAKf,UAAU,QAAf,SACGe,EAAMuD,MAAMC,KAAI,SAAAC,GAAI,OACnB,cAAC,EAAD,CACEtE,QAASsE,EAAKtE,QACdC,YAAaqE,EAAKrE,YAClBG,aAAc,kBAAMS,EAAM0D,kBAAkBD,EAAKrC,IAAI,IACrD/B,MAAOoE,EAAKpE,MAEZC,WAAY,kBAAMU,EAAM0D,kBAAkBD,EAAKrC,IAAI,IACnD5B,WAAYiE,EAAKE,QACjBlE,QAASgE,EAAKhE,SAHTgE,EAAKrC,SAULwC,MA5Lf,WACE,MAA0BC,mBAAS,IAAnC,mBAAON,EAAP,KAAcO,EAAd,KACA,EAA0DD,mBAAS,GAAnE,mBAAOE,EAAP,KAA8BC,EAA9B,KACA,EAAkDH,oBAAS,GAA3D,mBAAOI,EAAP,KAA0BC,EAA1B,KACA,EAAwCL,mBAAS,QAAjD,mBAAOM,EAAP,KAAqBC,EAArB,KACA,EAA8BP,oBAAS,GAAvC,mBAAOQ,EAAP,KAAgBC,EAAhB,KACA,EAA8CT,oBAAS,GAAvD,mBAAOU,EAAP,KAAwBC,EAAxB,KACA,EAA0DX,oBAAS,GAAnE,mBAAOY,EAAP,KAA8BC,EAA9B,KACA,EAAkCb,mBAAS,IAA3C,mBAAOc,EAAP,KAAkBC,EAAlB,KAGMC,EAAiBnC,iBAAO,MAXjB,4CAsEb,WAAiCoC,EAAQC,GAAzC,mBAAAC,EAAA,kEAEUC,EAFV,YAE4B1B,GAClB2B,EAAYD,EAAYE,WAAU,SAAA1B,GAAI,OAAIA,EAAKrC,KAAO0D,KACtDM,EAAsBH,EAAYC,GAAWvB,QAEnDsB,EAAYC,GAAWzF,QAAUsF,EACjCE,EAAYC,GAAWvB,QAAUoB,EAASK,EAAsB,EAAIA,EAAsB,GAEtFL,EATR,iCAUYM,IAAMC,IAAN,iBAAoBR,EAApB,YAVZ,gDAYYO,IAAMC,IAAN,iBAAoBR,EAApB,cAZZ,QAeIhB,EAASmB,GAfb,wHAtEa,kEAmGb,WAA0BM,EAA1B,sBAAAP,EAAA,6DAAoCQ,EAApC,EAAoCA,cAApC,SAEIA,GAAc,GAFlB,SAG2BH,IAAMI,KAAK,SAAUF,GAHhD,gBAGYG,EAHZ,EAGYA,KACRF,GAAc,GACdZ,EAAa,6BAAD,OAA8Bc,EAAKC,QAAQC,KAAKC,SAC5D/B,GAAS,SAAAgC,GAAa,OAAKJ,EAAKC,QAAQlC,MAAlB,mBAA2BqC,OANrD,wDAQIN,GAAc,GARlB,gEAnGa,sBAmHb,OArGAO,IAAWC,cAAc,SAKzBC,qBAAU,WACRZ,IACGa,IADH,qBACqB/B,IAClBgC,MAAK,SAAAC,GACJ,IAAQT,EAAYS,EAASV,KAArBC,QACR7B,GAAS,SAAAgC,GAAa,4BAAQA,GAAR,YAA0BH,OAChDvB,EAAgBuB,EAAQA,EAAQlE,OAAS,GAAGL,IAC5CoD,EAAsC,KAAnBmB,EAAQlE,QACvB4C,GACFC,GAAW,MAGd+B,OAAM,WACL/B,GAAW,QAEd,CAACP,IAKJkC,qBAAU,WACR,IACMrD,EADc,IAAI0D,gBAAgBC,OAAOC,SAASC,QAChCP,IAAI,OAExBtD,GACFyC,IACGC,IAAI,SAAU,CAAE1C,QAChByD,OAAM,SAAA7E,GAAK,OAAIkF,QAAQC,IAAInF,QAE/B,IAoEA6C,EAwCC,6CAvCA,sBAAKpF,UAAU,MAAf,UACE,cAAC,EAAD,CACEyB,eAAgB,kBAAMwD,GAAqB,IAC3CvD,gBAAiB,kBAAM+D,GAAyB,MAElD,cAAClE,EAAD,CACEL,WAAY,kBAAM+D,GAAqB,IACvCjE,OAAQgE,IAEV,cAAC,EAAD,CACE9D,WAAY,WACVuE,GAAyB,GACzBE,EAAa,KAEfhD,cAA6B,KAAd+C,EACf1E,OAAQwE,EACR3C,KAAM6C,EACN3C,SAtIK,gDAwIP,cAAC,EAAD,CACEtB,eAAgB,kBAAMwD,GAAqB,IAC3Cb,mBAAoB,kBAAMqB,GAAyB,MAErD,cAAC,EAAD,IACA,cAACpB,EAAD,CACEI,kBA9IK,8CA+ILH,MAAOA,IAGPgB,EACE,qBAAK3B,IAAK,SAAAgE,GA5FpB,IAA4BC,EA6FA,OAAZD,GAA+C,OAA3B/B,EAAe9B,UACrC8B,EAAe9B,QAAU6D,EA9FXC,EA+FKD,EA9F/B,IAAIE,sBAAqB,SAAAC,GACvBA,EAAQC,SAAQ,SAAAC,GACVA,EAAMC,gBACRlD,GAAyB,SAAA8B,GAAa,OAAIA,EAAgB,WAG7DqB,QAAQN,OA2FH,SC1JGO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBnB,MAAK,YAAkD,IAA/CoB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF5E,SAAS6E,eAAe,SAM1BX,K","file":"static/js/main.fb200ef8.chunk.js","sourcesContent":["import './CountdownContainer.css';\r\n\r\n/**\r\n * @description Function component for countdown\r\n * @returns {Object}\r\n */\r\nexport default function CountdownContainer() {\r\n  return (\r\n    <div className=\"countdown-container\">\r\n      <div className=\"header-2-bold\">Next Giveaway: 05/15/21 @ 12 PM EST</div>\r\n      <div className=\"header-2-bold\">Prize: 50$ (USD) In ADA or BTC (your choice)</div>\r\n    </div>\r\n  );\r\n}","import { IconContext } from 'react-icons';\r\nimport { IoArrowUpCircleOutline } from 'react-icons/io5';\r\n\r\nimport './Idea.css';\r\n\r\nexport default function Idea({\r\n  context,\r\n  description,\r\n  title,\r\n  upvoteIdea,\r\n  downvoteIdea,\r\n  numUpvotes,\r\n  upvoted\r\n}) {\r\n  /**\r\n   * @description Function used to handle the click for upvote;\r\n   * it is used to wrap the prop function passed in the changing of color\r\n   */\r\n  function handleUpvoteClick() {\r\n    if (!upvoted) {\r\n      upvoteIdea();\r\n    } else {\r\n      downvoteIdea();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"idea\">\r\n      <div className=\"header-2-bold\">{title}</div>\r\n      <div className=\"idea-section\">\r\n        <div className=\"idea-section-header\">What dApp do you wish existed?</div>\r\n        <div className=\"idea-section-text\">{description}</div>\r\n      </div>\r\n      <div className=\"idea-section\">\r\n        <div className=\"idea-section-header\">Why?</div>\r\n        <div className=\"idea-section-text\">{context}</div>\r\n      </div>\r\n      <div className=\"idea-upvote-button-container\">\r\n        <IconContext.Provider value={{ color: upvoted ? '#1DA1F2' : '#ffffff', size: '3rem' }}>\r\n          <IoArrowUpCircleOutline\r\n            className=\"idea-upvote-button\"\r\n            onClick={handleUpvoteClick}\r\n          />\r\n        </IconContext.Provider>\r\n        <span className=\"idea-upvote-count\">{numUpvotes}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport ReactModal from 'react-modal';\r\nimport { IconContext } from 'react-icons';\r\nimport { IoClose } from 'react-icons/io5';\r\n\r\nimport './Modal.css';\r\n\r\n/**\r\n * @description Component used as wrapper for react-modal;\r\n * it adds the close button and also would help easily swap\r\n * out libraries if needed\r\n * @param {Object} props\r\n * @returns {Object}\r\n */\r\nexport default function Modal(props) {\r\n  return (\r\n    <ReactModal\r\n      className={props.className ? props.className : ''}\r\n      isOpen={props.isOpen}\r\n      onRequestClose={props.closeModal}\r\n      style={{ content: {background: '#000000 none repeat scroll 0% 0%'} }}\r\n    >\r\n      <div className=\"close-modal-button-container\">\r\n        <IconContext.Provider value={{ size: '5rem' }}>\r\n          <IoClose className=\"close-modal-button\" onClick={props.closeModal}/>\r\n        </IconContext.Provider>\r\n      </div>\r\n      <div className=\"modal-content-container\">\r\n        {props.children}\r\n      </div>\r\n    </ReactModal>\r\n  );\r\n}","import Modal from '../Modal';\r\n\r\n/**\r\n * @description Function component for intro modal\r\n * @param {Object} props\r\n * @returns {Object}\r\n */\r\nexport default function IntroModal(props) {\r\n  return (\r\n    <Modal\r\n      closeModal={props.closeModal}\r\n      isOpen={props.isOpen}\r\n    >\r\n      <div className=\"modal-header header-2-bold\">Welcome</div>\r\n      <div className=\"header-3-bold\">Site Mission</div>\r\n      <p className=\"modal-content-body-text\">To help serve as a repository for dApps.  A repository that will help give developers, in the ecosystem, clues on what to build to further facilitate the mass adoption of crypto.  Through this, investors and developers could greatly benefit.</p>\r\n      <div className=\"header-3-bold\">How It Works</div>\r\n      <ul>\r\n        <li>Viewing Ideas: Checkout ideas submitted by other community members.  You could also upvote those that you like, which helps validate which projects should be worked on.  Note: There is no login functionality, so what this means is that if you like an idea and refresh the page, you will notice that you can upvote it again.  Currently, we do not want to support accounts.</li>\r\n        <li>Submitting Ideas: Share a project you think would be cool to invest in and can add value to the space.</li>\r\n        <li>Win Crypto: Submit an idea and share the link generated on crypto twitter or wherever you would like.</li>\r\n      </ul>\r\n      <div className=\"header-3-bold\">Prizes</div>\r\n      <div className=\"modal-content-body-text\">I like to give out BTC, ADA, or whatever else seems like a good bet.  Checkout the giveaway board on the home page to see what will be given away (hint: you can choose between two or more).</div>\r\n      <div className=\"header-3-bold\">How To Win Prizes</div>\r\n      <ul>\r\n        <li>Get Started: Submit an idea</li>\r\n        <li>Start Earning Points: Share the link generated, once idea is submitted, with your friends on social media.  For every person who visits with that link, you earn a point.</li>\r\n      </ul>\r\n      <div className=\"header-3-bold\">Contact</div>\r\n      <p className=\"modal-content-body-text\">Send an email to: admin@prequalie.com if you have any questions</p>\r\n    </Modal>\r\n  );\r\n}","import { IconContext } from 'react-icons';\r\nimport { IoPencil, IoHelpOutline } from 'react-icons/io5';\r\n\r\nimport './SecondaryNavigation.css';\r\n\r\n/**\r\n * @description Component for secondary navigation, which is on the bottom right\r\n * side of the screen\r\n * @param {Object} props\r\n * @returns {Object}\r\n */\r\nexport default function SecondaryNavigation(props) {\r\n  return (\r\n    <div className=\"secondary-navigation\">\r\n      <button className=\"secondary-navigation-button secondary-navigation-button-help\">\r\n        <IconContext.Provider value={{ size: '2rem', color: '#1DA1F2' }}>\r\n          <IoHelpOutline onClick={props.openIntroModal}/>\r\n        </IconContext.Provider>\r\n      </button>\r\n      <button className=\"secondary-navigation-button secondary-navigation-button-create-idea\">\r\n        <IconContext.Provider value={{ size: '2rem', color: '#ffffff' }}>\r\n          <IoPencil onClick={props.openCreateModal}/>\r\n        </IconContext.Provider>\r\n      </button>\r\n    </div>\r\n  );\r\n}","import { useField } from 'formik';\r\n\r\nimport './TextInput.css';\r\n\r\n/**\r\n * @description Wrapper to provide reusability and ease of use with for Fomik\r\n * @param {Object} props\r\n * @returns {Object}\r\n */\r\nexport default function TextInput({ label, useTextArea, useCharacterCount, maxCount, className, ...props }) {\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <div className={`text-input-container text-input-container-${props.id || props.name}`}>\r\n      <label className=\"text-input-label\" htmlFor={props.id || props.name}>{label}</label>\r\n      {meta.touched && meta.error ? (\r\n        <div className=\"text-input-error\">{meta.error}</div>\r\n      ) : null}\r\n      {useTextArea ?\r\n        <textarea className=\"form-control text-area\" {...field} {...props} /> :\r\n        <input className=\"form-control text-input\" {...field} {...props} />\r\n      }\r\n      {\r\n        useCharacterCount ?\r\n          <div className=\"form-control-character-count\">{-(field.value.length - maxCount)} / {maxCount}</div> :\r\n          null\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nTextInput.defaultProps = {\r\n  className: ''\r\n};","import { useRef } from 'react';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { IoLogoTwitter, IoCopySharp } from 'react-icons/io5';\r\nimport { IconContext } from 'react-icons';\r\nimport { TwitterShareButton } from 'react-share';\r\n\r\nimport Modal from '../Modal';\r\nimport TextInput from '../../text-input/TextInput';\r\n\r\nimport './ShareIdeaModal.css';\r\n\r\n/**\r\n * @description Function component used for the create idea\r\n * modal\r\n * @param {Object} props\r\n * @returns {Object}\r\n */\r\nexport default function ShareIdeaModal(props) {\r\n  return (\r\n    <Modal\r\n      closeModal={props.closeModal}\r\n      isOpen={props.isOpen}\r\n    >\r\n      {props.formSubmitted ? <ShareIdeaPostSubmit link={props.link} /> : <ShareIdeaModalForm onSubmit={props.onSubmit}/>}\r\n    </Modal>\r\n  );\r\n}\r\n\r\n/**\r\n * @description Function component for the form\r\n * @param {Object} props\r\n * @returns {Object}\r\n */\r\nfunction ShareIdeaModalForm(props) {\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        title: '',\r\n        description: '',\r\n        context: '',\r\n        email: ''\r\n      }}\r\n      validationSchema={Yup.object({\r\n        title: Yup.string()\r\n          .max(60, 'Can be no more than 60 characters')\r\n          .required('Required'),\r\n        description: Yup.string()\r\n          .max(250, 'Can be no more than 250 characters')\r\n          .required('Required'),\r\n        context: Yup.string()\r\n          .max(250, 'Can be no more than 250 characters')\r\n          .required('Required'),\r\n        email: Yup.string()\r\n          .email('Invalid email address')\r\n          .required('Required'),\r\n      })}\r\n      onSubmit={props.onSubmit}\r\n    >\r\n      {({ isSubmitting }) => (\r\n        <Form>\r\n          <TextInput\r\n            label={'Title'}\r\n            name={'title'}\r\n            placeholder={'Moneycake Swap'}\r\n          />\r\n          <TextInput\r\n            label={'What dApp would you like to see built and invest in?'}\r\n            name={'description'}\r\n            placeholder={'Example: App that processes crypto payments'}\r\n            useTextArea={true}\r\n            useCharacterCount={true}\r\n            maxCount={250}\r\n          />\r\n          <TextInput\r\n            name={'context'}\r\n            label={'Why?  What problem would it solve for you?'}\r\n            placeholder={'Example: It would allow me to use ETH tokens'}\r\n            useTextArea={true}\r\n            useCharacterCount={true}\r\n            maxCount={250}\r\n          />\r\n          <TextInput\r\n            label=\"Email\"\r\n            name=\"email\"\r\n            placeholder=\"hodler@hodler.com\"\r\n          />\r\n          <div className=\"share-idea-modal-row-button\">\r\n            <button className=\"share-idea-modal-submit-button\">{isSubmitting ? 'Submitting...' : 'Submit'}</button>\r\n          </div>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n}\r\n\r\n/**\r\n * @description Function used render content post submit\r\n * @param {Object} props\r\n * @returns {Object}\r\n */\r\nfunction ShareIdeaPostSubmit(props) {\r\n  const inputRef = useRef(null);\r\n\r\n  /**\r\n   * @description Helper function for encapsulating the code that\r\n   * copies link to clipboard\r\n   */\r\n  function copyLinkToClipboard() {\r\n    inputRef.current.focus();\r\n    inputRef.current.select();\r\n    document.execCommand('copy');\r\n  }\r\n\r\n  return (\r\n    <div className=\"share-idea-post-submit-content\">\r\n      <div className=\"header-2-bold modal-header\">Thanks!</div>\r\n      <p className=\"modal-content-body-text\">Thanks for helping build the future of crypto!</p>\r\n      <div className=\"header-3-bold modal-sub-header\">Link</div>\r\n      <p className=\"modal-content-body-text\">Now that you've shared an idea, here is the link you can share to earn you points and put you in the running to earn some crypto:</p>\r\n      <input className=\"share-link-text-input\" readOnly ref={inputRef} value={props.link}/>\r\n      <div className=\"header-3-bold modal-sub-header\">Copy And Share The Link</div>\r\n      <div className=\"share-link-buttons-container\">\r\n        <IconContext.Provider value={{ size: '3rem', color: '#1DA1F2' }}>\r\n          <TwitterShareButton\r\n            className=\"share-link-button\"\r\n            title=\"PreQualie - Share dApp Ideas\"\r\n            url={props.link}\r\n          >\r\n            <span className=\"share-link-button-icon\">\r\n              <IoLogoTwitter/>\r\n            </span>\r\n            <span className=\"share-link-button-text\">Twitter</span>\r\n          </TwitterShareButton>\r\n          <button className=\"share-link-button share-link-button-second\" onClick={() => copyLinkToClipboard()}>\r\n            <span className=\"share-link-button-icon\">\r\n              <IoCopySharp/>\r\n            </span>\r\n            <span className=\"share-link-button-text\">Copy Link</span>\r\n          </button>\r\n        </IconContext.Provider>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import './WelcomeContainer.css';\r\n\r\nexport default function WelcomeContainer(props) {\r\n  return (\r\n    <div className=\"welcome-container\">\r\n      <div className=\"header-2-bold\">Hodlers, Help Build the Future of Crypto.</div>\r\n      <div className=\"welcome-container-buttons-container\">\r\n        <button className=\"welcome-container-button welcome-container-button-start\" onClick={() => props.openIntroModal()}>New? Start Here</button>\r\n        <button className=\"welcome-container-button welcome-container-button-share\" onClick={() => props.openShareIdeaModal()}>Share Idea</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import { useEffect, useRef, useState } from 'react';\nimport axios from 'axios';\nimport ReactModal from 'react-modal'\n\nimport CountdownContainer from './components/countdown-container/CountdownContainer';\nimport Idea from './components/idea/Idea';\nimport IntroModal from './components/modal/intro-modal/IntroModal';\nimport SecondaryNavigation from './components/secondary-navigation/SecondaryNavigation';\nimport ShareIdeaModal from './components/modal/share-idea/ShareIdeaModal';\nimport WelcomeContainer from './components/welcome-container/WelcomeContainer';\n\nimport './App.css';\n\nfunction App() {\n  const [ideas, setIdeas] = useState([]);\n  const [infiniteScrollCounter, setInfiniteScrollCounter] = useState(0);\n  const [introModalVisible, setIntroModalVisible] = useState(false);\n  const [lastIdeaSeen, setLastIdeaSeen] = useState('null');\n  const [loading, setLoading] = useState(true);\n  const [olderIdeasExist, setOlderIdeasExist] = useState(true);\n  const [shareIdeaModalVisible, setShareIdeaModalVisible] = useState(false);\n  const [shareLink, setShareLink] = useState('');\n  \n  // Used for infinite scroll\n  const bottomBoundary = useRef(null);\n  \n  // Set App Element For All Modals\n  ReactModal.setAppElement('#root');\n\n  /**\n   * @description Effect for loading ideas from the server\n   */\n  useEffect(() => {\n    axios\n      .get(`/ideas?lid=${lastIdeaSeen}`)\n      .then(response => {\n        const { results } = response.data;\n        setIdeas(previousState => [...previousState, ...results]);\n        setLastIdeaSeen(results[results.length - 1].id);\n        setOlderIdeasExist(results.length === 10);\n        if (loading) {\n          setLoading(false);\n        }\n      })\n      .catch(() => {\n        setLoading(false);\n      });\n  }, [infiniteScrollCounter]);\n\n  /**\n   * @description Effect for incrementing referral count on load\n   */\n  useEffect(() => {\n    const queryParams = new URLSearchParams(window.location.search);\n    const ref = queryParams.get('ref');\n\n    if (ref) {\n      axios\n        .put('/users', { ref })\n        .catch(error => console.log(error));\n    }\n  }, []);\n\n  /**\n   * @description Scroll observer\n   * @param {Object} node\n   * @returns {}\n   */\n  function handleIntersection(node) {\n    new IntersectionObserver(entries => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting) {\n          setInfiniteScrollCounter(previousState => previousState + 1);\n        }\n      });\n    }).observe(node)\n  }\n\n  /**\n   * @description Handler for clicking upvote button\n   * @param {Number} ideaId\n   * @param {Boolean} upvote\n   */\n  async function handleUpvoteClick(ideaId, upvote) {\n    try {\n      const copyOfIdeas = [...ideas];\n      const ideaIndex = copyOfIdeas.findIndex(idea => idea.id === ideaId);\n      const ideaPreviousUpvotes = copyOfIdeas[ideaIndex].upvotes; \n\n      copyOfIdeas[ideaIndex].upvoted = upvote;\n      copyOfIdeas[ideaIndex].upvotes = upvote ? ideaPreviousUpvotes + 1 : ideaPreviousUpvotes - 1;\n\n      if (upvote) {\n        await axios.put(`/ideas/${ideaId}/upvote`);\n      } else {\n        await axios.put(`/ideas/${ideaId}/downvote`);\n      }\n\n      setIdeas(copyOfIdeas);\n    } catch (error) {\n      /**\n       * @TODO (Urgent) Do something with the error for production\n       */\n      throw error;\n    }\n  }\n\n  /**\n   * @description Wrapper for submitting new idea\n   * @param {Object} values\n   * @param {Object} otherFormState\n   */\n  async function submitIdea(values, { setSubmitting }) {\n    try {\n      setSubmitting(true);\n      const { data } = await axios.post('/ideas', values);\n      setSubmitting(false);\n      setShareLink(`https://prequalie.com?ref=${data.results.user.idHash}`);\n      setIdeas(previousState => [data.results.idea, ...previousState]);\n    } catch (error) {\n      setSubmitting(false);\n      /**\n       * @TODO (Urgent) Do something with the error for production\n       */\n      throw error;\n    }\n  }\n\n  return (\n    !loading ?\n      <div className=\"app\">\n        <SecondaryNavigation\n          openIntroModal={() => setIntroModalVisible(true)}\n          openCreateModal={() => setShareIdeaModalVisible(true)}\n        />\n        <IntroModal\n          closeModal={() => setIntroModalVisible(false)}\n          isOpen={introModalVisible}\n        />\n        <ShareIdeaModal\n          closeModal={() => {\n            setShareIdeaModalVisible(false);\n            setShareLink(''); // once the modal closes, this will let the user resubmit form\n          }}\n          formSubmitted={shareLink !== ''}\n          isOpen={shareIdeaModalVisible}\n          link={shareLink}\n          onSubmit={submitIdea}\n        />\n        <WelcomeContainer\n          openIntroModal={() => setIntroModalVisible(true)}\n          openShareIdeaModal={() => setShareIdeaModalVisible(true)}\n        />\n        <CountdownContainer/>\n        <Ideas\n          handleUpvoteClick={handleUpvoteClick}\n          ideas={ideas}\n        />\n        {\n          olderIdeasExist ?\n            <div ref={element => {\n              if (element !== null && bottomBoundary.current === null) {\n                bottomBoundary.current = element;\n                handleIntersection(element);\n              }\n            }}></div> :\n            null\n        }\n      </div> :\n      <div>loading...</div>\n  );\n}\n\n/******************************\n * WRAPPER COMPONENTS\n ******************************/\n\n/**\n * @description Component used to keep main component clean\n * @param {Object} props\n * @returns {Object}\n */\nfunction Ideas(props) {\n  return (\n    <div className=\"ideas\">\n      {props.ideas.map(idea => (\n        <Idea\n          context={idea.context}\n          description={idea.description}\n          downvoteIdea={() => props.handleUpvoteClick(idea.id, false)}\n          title={idea.title}\n          key={idea.id}\n          upvoteIdea={() => props.handleUpvoteClick(idea.id, true)}\n          numUpvotes={idea.upvotes}\n          upvoted={idea.upvoted}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}